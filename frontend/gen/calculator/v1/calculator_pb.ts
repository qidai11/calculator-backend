// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file calculator/v1/calculator.proto (package calculator.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message calculator.v1.OperationRequest
 */
export class OperationRequest extends Message<OperationRequest> {
  /**
   * @generated from field: double a = 1;
   */
  a = 0;

  /**
   * @generated from field: double b = 2;
   */
  b = 0;

  constructor(data?: PartialMessage<OperationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.v1.OperationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "b", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationRequest {
    return new OperationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationRequest {
    return new OperationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationRequest {
    return new OperationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OperationRequest | PlainMessage<OperationRequest> | undefined, b: OperationRequest | PlainMessage<OperationRequest> | undefined): boolean {
    return proto3.util.equals(OperationRequest, a, b);
  }
}

/**
 * @generated from message calculator.v1.OperationResponse
 */
export class OperationResponse extends Message<OperationResponse> {
  /**
   * @generated from field: double result = 1;
   */
  result = 0;

  constructor(data?: PartialMessage<OperationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "calculator.v1.OperationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationResponse {
    return new OperationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationResponse {
    return new OperationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationResponse {
    return new OperationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OperationResponse | PlainMessage<OperationResponse> | undefined, b: OperationResponse | PlainMessage<OperationResponse> | undefined): boolean {
    return proto3.util.equals(OperationResponse, a, b);
  }
}

